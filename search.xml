<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>CentOS 安装 Redis</title>
      <link href="/2018/02/03/redis/redis/"/>
      <url>/2018/02/03/redis/redis/</url>
      <content type="html"><![CDATA[<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>下载：<a href="https://redis.io/download" target="_blank" rel="noopener">redis-x.x.x.tar.gz</a></p><p>解压：tar -zxvf redis-x.x.x.tar.gz -C /usr/local/redis</p><p>进入：cd /usr/local/redis/redis-x.x.x</p><p>编译：make</p><h3 id="允许外网链接"><a href="#允许外网链接" class="headerlink" title="允许外网链接"></a>允许外网链接</h3><p>vi redis-conf<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">################################## NETWORK #####################################</span><br><span class="line"></span><br><span class="line"># By default, if no &quot;bind&quot; configuration directive is specified, Redis listens</span><br><span class="line"># for connections from all the network interfaces available on the server.</span><br><span class="line"># It is possible to listen to just one or multiple selected interfaces using</span><br><span class="line"># the &quot;bind&quot; configuration directive, followed by one or more IP addresses.</span><br><span class="line">#</span><br><span class="line"># Examples:</span><br><span class="line">#</span><br><span class="line"># bind 192.168.1.100 10.0.0.1</span><br><span class="line"># bind 127.0.0.1 ::1</span><br><span class="line">#</span><br><span class="line"># ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the</span><br><span class="line"># internet, binding to all the interfaces is dangerous and will expose the</span><br><span class="line"># instance to everybody on the internet. So by default we uncomment the</span><br><span class="line"># following bind directive, that will force Redis to listen only into</span><br><span class="line"># the IPv4 lookback interface address (this means Redis will be able to</span><br><span class="line"># accept connections only from clients running into the same computer it</span><br><span class="line"># is running).</span><br><span class="line">#</span><br><span class="line"># IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</span><br><span class="line"># JUST COMMENT THE FOLLOWING LINE.</span><br><span class="line"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">bind 127.0.0.1</span><br></pre></td></tr></table></figure></p><font color="red">把最后那个bind 127.0.0.1改为0.0.0.0</font><h3 id="启动／停止redis"><a href="#启动／停止redis" class="headerlink" title="启动／停止redis"></a>启动／停止redis</h3><p>进入上面我们解压的目录：cd /usr/local/redis/redis-x.x.x</p><h4 id="1-直接启动"><a href="#1-直接启动" class="headerlink" title="1.直接启动"></a>1.直接启动</h4><p>./redis-server &amp; (这个ctrl+c 不会中断服务) 默认找redis.conf配置文件<br>./redis-server (这个ctrl+c 会中断redis服务 ) 默认找redis.conf配置文件</p><h4 id="2-指定配置文件启动"><a href="#2-指定配置文件启动" class="headerlink" title="2.指定配置文件启动"></a>2.指定配置文件启动</h4><p>./redis-server /6379.conf</p><h4 id="3-开机启动"><a href="#3-开机启动" class="headerlink" title="3.开机启动"></a>3.开机启动</h4><p>复制redis配置文件<br>cp /usr/local/redis/redis-x.x.x/redis.conf /etc/redis/6379.conf<br>复制redis启动脚本<br>cp /usr/local/redis/redis-x.x.x/utils/redis_init_script /etc/init.d/redis<br>修改参数 vi /etc/init.d/redis<br>按i编辑，将下面EXEC和CLIEXEC改为指定redis的安装路径<br>EXEC=<font color="red">/usr/local/redis/redis-x.x.x/src/redis-server</font><br>CLIEXEC=<font color="red">/usr/local/redis/redis-x.x.x/src/redis-cli</font><br>修改完成后按 Esc 再按 :wq 回车 保存并退出</p><p>最后,启动redis<br>打开redis命令：service redis start<br>关闭redis命令：service redis stop<br>设为开机启动：chkconfig redis on<br>设为开机关闭：chkconfig redis off</p><h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><p>vi /etc/redis/6379.conf<br>找到这一段，删除#解开注释，foobared就是密码，你可以随意编辑这个密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># requirepass foobared</span><br></pre></td></tr></table></figure></p><p>重启生效</p>]]></content>
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>如何处理Java中的ConcurrentModificationException？要小心从循环中删除ArrayList中的元素</title>
      <link href="/2018/02/01/java/collections/java-remove-list-error/"/>
      <url>/2018/02/01/java/collections/java-remove-list-error/</url>
      <content type="html"><![CDATA[<p>在Java中从ArrayList中移除元素的一个常见问题是ConcurrentModificationException</p><h3 id="增强for循环（异常）"><a href="#增强for循环（异常）" class="headerlink" title="增强for循环（异常）"></a>增强for循环（异常）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; listOfBooks = new ArrayList&lt;&gt;(Arrays.asList(&quot;Programming Pearls&quot;,&quot;Clean Code&quot;,&quot;Effective Java&quot;,&quot;Code Complete&quot;));</span><br><span class="line">System.out.println(&quot;List before : &quot; + listOfBooks);</span><br><span class="line">for (String book:listOfBooks) &#123;</span><br><span class="line">    if (book.contains(&quot;Programming&quot;))&#123;</span><br><span class="line">        System.out.println(&quot;Removing &quot; + book);</span><br><span class="line">        listOfBooks.remove(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;List after : &quot; + listOfBooks);</span><br></pre></td></tr></table></figure><h3 id="iterator迭代器（异常）"><a href="#iterator迭代器（异常）" class="headerlink" title="iterator迭代器（异常）"></a>iterator迭代器（异常）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; listOfBooks = new ArrayList&lt;&gt;(Arrays.asList(&quot;Programming Pearls&quot;,&quot;Clean Code&quot;,&quot;Effective Java&quot;,&quot;Code Complete&quot;));</span><br><span class="line">System.out.println(&quot;List before : &quot; + listOfBooks);</span><br><span class="line">Iterator iterator = listOfBooks.iterator();</span><br><span class="line">while (iterator.hasNext())&#123;</span><br><span class="line">    String book = (String) iterator.next();</span><br><span class="line">    if (book.contains(&quot;Programming&quot;))&#123;</span><br><span class="line">        System.out.println(&quot;Removing &quot; + book);</span><br><span class="line">        listOfBooks.remove(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red"><br>Exception in thread “main” java.util.ConcurrentModificationException<br>at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901)<br>at java.util.ArrayList$Itr.next(ArrayList.java:851)<br>at com.tanyouping.weixiao.util.Test.main(Test.java:25)</font><br>Process finished with exit code 1</p><p>可以很明显看出<code>checkForComodification(ArrayList.java:901)</code> ArrayList.class 901 行checkForComodification()方法抛出的。看看她为什么抛出好吧！<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">final void checkForComodification() &#123;</span><br><span class="line">    if (modCount != expectedModCount)</span><br><span class="line">        throw new ConcurrentModificationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>modCount != expectedModCount</code> 当这两个值不相等时将异常抛出</p><p>这两个值为什么不相等呢，是什么时候改变的呢？看看remove()方法，删除元素调用了remove()方法，实际上remove()方法里面调用的是fastRemove()方法，fastRemove()方法 进行了 modCount++; 然后接下来就是删除元素的操作，最后将size进行减1操作，并将引用置为null以方便垃圾收集器进行回收工作。此时modCount这个值就进行了++操作。而expectedModCount并没有任何处理！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public boolean remove(Object o) &#123;</span><br><span class="line">    if (o == null) &#123;</span><br><span class="line">        for (int index = 0; index &lt; size; index++)</span><br><span class="line">            if (elementData[index] == null) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        for (int index = 0; index &lt; size; index++)</span><br><span class="line">            if (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void fastRemove(int index) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    int numMoved = size - index - 1;</span><br><span class="line">    if (numMoved &gt; 0)</span><br><span class="line">        System.arraycopy(elementData, index+1, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = null; // clear to let GC do its work</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当执行下一次循环时，调用iterator.next()时，next()方法中调用了checkForComodification()，自然modCount不等于expectedModCount，抛出ConcurrentModificationException异常。<br>关键点就在于：调用listOfBooks.remove(book);方法导致modCount和expectedModCount的值不一致。</p><h3 id="在单线程环境下的解决办法"><a href="#在单线程环境下的解决办法" class="headerlink" title="在单线程环境下的解决办法"></a>在单线程环境下的解决办法</h3><h3 id="for循环（正常）并没有这个上面那个判断"><a href="#for循环（正常）并没有这个上面那个判断" class="headerlink" title="for循环（正常）并没有这个上面那个判断"></a>for循环（正常）并没有这个上面那个判断</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; listOfBooks = new ArrayList&lt;&gt;(Arrays.asList(&quot;Programming Pearls&quot;,&quot;Clean Code&quot;,&quot;Effective Java&quot;,&quot;Code Complete&quot;));</span><br><span class="line">System.out.println(&quot;List before : &quot; + listOfBooks);</span><br><span class="line">for (int i = 0; i &lt; listOfBooks.size(); i++) &#123;</span><br><span class="line">    String book = listOfBooks.get(i);</span><br><span class="line">    if (book.contains(&quot;Programming&quot;))&#123;</span><br><span class="line">        System.out.println(&quot;Removing &quot; + book);</span><br><span class="line">        listOfBooks.remove(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;List after : &quot; + listOfBooks);</span><br></pre></td></tr></table></figure><h3 id="iterator迭代器（正常时）"><a href="#iterator迭代器（正常时）" class="headerlink" title="iterator迭代器（正常时）"></a>iterator迭代器（正常时）</h3><p><code>使用iterator.remove()方法</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; listOfBooks = new ArrayList&lt;&gt;(Arrays.asList(&quot;Programming Pearls&quot;,&quot;Clean Code&quot;,&quot;Effective Java&quot;,&quot;Code Complete&quot;));</span><br><span class="line">System.out.println(&quot;List before : &quot; + listOfBooks);</span><br><span class="line">Iterator iterator = listOfBooks.iterator();</span><br><span class="line">while (iterator.hasNext())&#123;</span><br><span class="line">    String book = (String) iterator.next();</span><br><span class="line">    if (book.contains(&quot;Programming&quot;))&#123;</span><br><span class="line">        System.out.println(&quot;Removing &quot; + book);</span><br><span class="line">        iterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;List after : &quot; + listOfBooks);</span><br></pre></td></tr></table></figure></p><h3 id="在多线程环境下的解决办法"><a href="#在多线程环境下的解决办法" class="headerlink" title="在多线程环境下的解决办法"></a>在多线程环境下的解决办法</h3><p>1）在使用iterator迭代的时候使用synchronized或者Lock进行同步；<br>2）使用并发容器CopyOnWriteArrayList代替ArrayList和Vector。</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>为什么在Java中使用==比较Integer是不好的？</title>
      <link href="/2018/02/01/java/java-Integer-2018-1-31/"/>
      <url>/2018/02/01/java/java-Integer-2018-1-31/</url>
      <content type="html"><![CDATA[<p>Java 5引入了自动装箱功能，可以自动将int转换为Integer，因为许多Java开发人员开始使用==运算符编写代码，将int变量与Integer对象以及Integer与Integer进行比较。你应该避免，因为它可以在你的程序中创建微妙的错误，因为它只适用于特定范围的整数，而不是所有的。当使用==运算符比较int变量和Integer对象时，还有另一个问题，Integer对象被转换为原始值。如果Integer对象为空，这可能会抛出空指针异常，从而导致程序崩溃。现在，当你使用==运算符比较两个Integer对象时，Java不会按值比较它们，它会使用引用比较。当两个整数具有相同的值时，==可以返回false，因为它们是堆中的两个不同的对象。</p><p>发生这种情况是因为自动装箱使用Integer.valueOf()方法将int转换为Integer，因为方法缓存范围-128到127的Integer对象，它在堆中返回相同的Integer对象，这就是为什么==运算符如果比较两个整数对象范围在-128到127之间正常，超出这个范围返回false。</p><p>我们看下源码<br>这是IntegerCache类 在堆中缓存了 -128～127之间的Integer对象<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">private static class IntegerCache &#123;</span><br><span class="line">        static final int low = -128;</span><br><span class="line">        static final int high;</span><br><span class="line">        static final Integer cache[];</span><br><span class="line"></span><br><span class="line">        static &#123;</span><br><span class="line">            // high value may be configured by property</span><br><span class="line">            int h = 127;</span><br><span class="line">            String integerCacheHighPropValue =</span><br><span class="line">                sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;);</span><br><span class="line">            if (integerCacheHighPropValue != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    int i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                    i = Math.max(i, 127);</span><br><span class="line">                    // Maximum array size is Integer.MAX_VALUE</span><br><span class="line">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -1);</span><br><span class="line">                &#125; catch( NumberFormatException nfe) &#123;</span><br><span class="line">                    // If the property cannot be parsed into an int, ignore it.</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            high = h;</span><br><span class="line"></span><br><span class="line">            cache = new Integer[(high - low) + 1];</span><br><span class="line">            int j = low;</span><br><span class="line">            for(int k = 0; k &lt; cache.length; k++)</span><br><span class="line">                cache[k] = new Integer(j++);</span><br><span class="line"></span><br><span class="line">            // range [-128, 127] must be interned (JLS7 5.1.7)</span><br><span class="line">            assert IntegerCache.high &gt;= 127;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private IntegerCache() &#123;&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这是Integer.valueOf 方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static Integer valueOf(int i) &#123;</span><br><span class="line">        //如果i大于等于缓存的最小对象 并且 i小于等于缓存的最大对象 return 缓存中的对象</span><br><span class="line">        if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">            return IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">        //否则在堆中创建一个</span><br><span class="line">        return new Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>某些包装类的一些JVM缓存对象例如Integer从-128到127，并返回相同的对象，如果通过“==”比较可以返回true，但在此范围之后，这个比较不起作用，结果就不是预料中的，这种行为是依赖于JVM的，所以最好避免这种检查使用equals()方法。例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Integer i1 = 260 ; </span><br><span class="line">Integeri2 = 260 ; </span><br><span class="line">if（i1 == i2）&#123; </span><br><span class="line">    System.out.println(&quot;i1和i2是平等的&quot;); </span><br><span class="line">&#125; else &#123; </span><br><span class="line">    System.out.println(&quot;i1和i2不相等&quot;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这里，你将得到<code>i1和i2不相等</code>,所以最好是在Java 1.5后面避免这种代码，而是使用equals()方法来比较Java中的Integer，这是更确定和更正确的。 </p><p>这是Integer.class重写equals方法，还是用==比较，但我们会发现传入的Integer进行了拆箱操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">        if (obj instanceof Integer) &#123;</span><br><span class="line">            return value == ((Integer)obj).intValue();</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Java中的自动装箱与拆箱</title>
      <link href="/2018/01/31/java/java-box-2018-1-31/"/>
      <url>/2018/01/31/java/java-box-2018-1-31/</url>
      <content type="html"><![CDATA[<h3 id="什么是自动装箱和拆箱"><a href="#什么是自动装箱和拆箱" class="headerlink" title="什么是自动装箱和拆箱"></a>什么是自动装箱和拆箱</h3><p>自动装箱就是Java自动将原始类型值转换成对应的对象，比如将int的变量转换成Integer对象，这个过程叫做装箱，反之将Integer对象转换成int类型值，这个过程叫做拆箱。因为这里的装箱和拆箱是自动进行的非人为转换，所以就称作为自动装箱和拆箱。原始类型byte,short,char,int,long,float,double和boolean对应的封装类为Byte,Short,Character,Integer,Long,Float,Double,Boolean。</p><h3 id="自动装箱拆箱要点"><a href="#自动装箱拆箱要点" class="headerlink" title="自动装箱拆箱要点"></a>自动装箱拆箱要点</h3><p>自动装箱时编译器调用<code>valueOf</code>将原始类型值转换成对象，同时自动拆箱时，编译器通过调用类似<code>intValue(),doubleValue()</code>这类的方法将对象转换成原始类型值。<br><a id="more"></a><br>自动装箱是将boolean值转换成Boolean对象，byte值转换成Byte对象，char转换成Character对象，float值转换成Float对象，int转换成Integer，long转换成Long，short转换成Short，自动拆箱则是相反的操作。</p><h3 id="何时发生自动装箱和拆箱"><a href="#何时发生自动装箱和拆箱" class="headerlink" title="何时发生自动装箱和拆箱"></a>何时发生自动装箱和拆箱</h3><p>自动装箱和拆箱在Java中很常见，比如我们有一个方法，接受一个对象类型的参数，如果我们传递一个原始类型值，那么Java会自动讲这个原始类型值转换成与之对应的对象。最经典的一个场景就是当我们向ArrayList这样的容器中增加原始类型数据时或者是创建一个参数化的类，比如下面的ThreadLocal。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; intList = new ArrayList&lt;Integer&gt;();</span><br><span class="line">intList.add(1); //autoboxing - primitive to object</span><br><span class="line">intList.add(2); //autoboxing</span><br><span class="line"></span><br><span class="line">ThreadLocal&lt;Integer&gt; intLocal = new ThreadLocal&lt;Integer&gt;();</span><br><span class="line">intLocal.set(4); //autoboxing</span><br><span class="line"></span><br><span class="line">int number = intList.get(0); // unboxing</span><br><span class="line">int local = intLocal.get(); // unboxing in Java</span><br></pre></td></tr></table></figure><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><p>上面的部分我们介绍了自动装箱和拆箱以及它们何时发生，我们知道了自动装箱主要发生在两种情况，一种是赋值时，另一种是在方法调用的时候。为了更好地理解这两种情况，我们举例进行说明。</p><h3 id="赋值时"><a href="#赋值时" class="headerlink" title="赋值时"></a>赋值时</h3><p>这是最常见的一种情况，在Java 1.5以前我们需要手动地进行转换才行，而现在所有的转换都是由编译器来完成。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//before autoboxing</span><br><span class="line">Integer iObject = Integer.valueOf(3);</span><br><span class="line">Int iPrimitive = iObject.intValue()</span><br><span class="line"></span><br><span class="line">//after java5</span><br><span class="line">Integer iObject = 3; //autobxing - primitive to wrapper conversion</span><br><span class="line">int iPrimitive = iObject; //unboxing - object to primitive conversion</span><br></pre></td></tr></table></figure></p><h3 id="方法调用时"><a href="#方法调用时" class="headerlink" title="方法调用时"></a>方法调用时</h3><p>这是另一个常用的情况，当我们在方法调用时，我们可以传入原始数据值或者对象，同样编译器会帮我们进行转换。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static Integer show(Integer iParam)&#123;</span><br><span class="line">   System.out.println(&quot;autoboxing example - method invocation i: &quot; + iParam);</span><br><span class="line">   return iParam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//autoboxing and unboxing in method invocation</span><br><span class="line">show(3); //autoboxing</span><br><span class="line">int result = show(3); //unboxing because return type of method is Integer</span><br></pre></td></tr></table></figure></p><p>show方法接受Integer对象作为参数，当调用<code>show(3)</code>时，会将int值转换成对应的Integer对象，这就是所谓的自动装箱，show方法返回Integer对象，而<code>int result = show(3);</code>中result为int类型，所以这时候发生自动拆箱操作，将show方法的返回的Integer对象转换成int值。</p><p>###自动装箱的弊端<br>自动装箱有一个问题，那就是在一个循环中进行自动装箱操作的情况，如下面的例子就会创建多余的对象，影响程序的性能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer sum = 0;</span><br><span class="line"> for(int i=1000; i&lt;5000; i++)&#123;</span><br><span class="line">   sum+=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的代码<code>sum+=i</code>可以看成<code>sum = sum + i</code>，但是+这个操作符不适用于Integer对象，首先sum进行自动拆箱操作，进行数值相加操作，最后发生自动装箱操作转换成Integer对象。其内部变化如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int result = sum.intValue() + i;</span><br><span class="line">Integer sum = new Integer(result);</span><br></pre></td></tr></table></figure></p><p>由于我们这里声明的sum为Integer类型，在上面的循环中会创建将近4000个无用的Integer对象，在这样庞大的循环中，会降低程序的性能并且加重了垃圾回收的工作量。因此在我们编程时，需要注意到这一点，正确地声明变量类型，避免因为自动装箱引起的性能问题。</p><h3 id="重载与自动装箱"><a href="#重载与自动装箱" class="headerlink" title="重载与自动装箱"></a>重载与自动装箱</h3><p>当重载遇上自动装箱时，情况会比较有些复杂，可能会让人产生有些困惑。在1.5之前，value(int)和value(Integer)是完全不相同的方法，开发者不会因为传入是int还是Integer调用哪个方法困惑，但是由于自动装箱和拆箱的引入，处理重载方法时稍微有点复杂。一个典型的例子就是ArrayList的remove方法，它有<code>remove(index)</code>和<code>remove(Object)</code>两种重载，我们可能会有一点小小的困惑，其实这种困惑是可以验证并解开的，通过下面的例子我们可以看到，当出现这种情况时，不会发生自动装箱操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public void test(int num)&#123;</span><br><span class="line">    System.out.println(&quot;method with primitive argument&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void test(Integer num)&#123;</span><br><span class="line">    System.out.println(&quot;method with wrapper argument&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//calling overloaded method</span><br><span class="line">AutoboxingTest autoTest = new AutoboxingTest();</span><br><span class="line">int value = 3;</span><br><span class="line">autoTest.test(value); //no autoboxing </span><br><span class="line">Integer iValue = value;</span><br><span class="line">autoTest.test(iValue); //no autoboxing</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">method with primitive argument</span><br><span class="line">method with wrapper argument</span><br></pre></td></tr></table></figure><h3 id="要注意的事项"><a href="#要注意的事项" class="headerlink" title="要注意的事项"></a>要注意的事项</h3><p>自动装箱和拆箱可以使代码变得简洁,但是其也存在一些问题和极端情况下的问题，以下几点需要我们加强注意。</p><h3 id="对象相等比较"><a href="#对象相等比较" class="headerlink" title="对象相等比较"></a>对象相等比较</h3><p>这是一个比较容易出错的地方，”==“可以用于原始值进行比较，也可以用于对象进行比较，当用于对象与对象之间比较时，比较的不是对象代表的值，而是检查两个对象是否是同一对象，这个比较过程中没有自动装箱发生。进行对象值比较不应该使用”==“，而应该使用对象对应的equals方法。看一个能说明问题的例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class AutoboxingTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String args[]) &#123;</span><br><span class="line"></span><br><span class="line">        // Example 1: == comparison pure primitive – no autoboxing</span><br><span class="line">        int i1 = 1;</span><br><span class="line">        int i2 = 1;</span><br><span class="line">        System.out.println(&quot;i1==i2 : &quot; + (i1 == i2)); // true</span><br><span class="line"></span><br><span class="line">        // Example 2: equality operator mixing object and primitive</span><br><span class="line">        Integer num1 = 1; // autoboxing</span><br><span class="line">        int num2 = 1;</span><br><span class="line">        System.out.println(&quot;num1 == num2 : &quot; + (num1 == num2)); // true</span><br><span class="line"></span><br><span class="line">        // Example 3: special case - arises due to autoboxing in Java</span><br><span class="line">        Integer obj1 = 1; // autoboxing will call Integer.valueOf()</span><br><span class="line">        Integer obj2 = 1; // same call to Integer.valueOf() will return same</span><br><span class="line">                            // cached Object</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;obj1 == obj2 : &quot; + (obj1 == obj2)); // true</span><br><span class="line"></span><br><span class="line">        // Example 4: equality operator - pure object comparison</span><br><span class="line">        Integer one = new Integer(1); // no autoboxing</span><br><span class="line">        Integer anotherOne = new Integer(1);</span><br><span class="line">        System.out.println(&quot;one == anotherOne : &quot; + (one == anotherOne)); // false</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">i1==i2 : true</span><br><span class="line">num1 == num2 : true</span><br><span class="line">obj1 == obj2 : true</span><br><span class="line">one == anotherOne : false</span><br></pre></td></tr></table></figure><p>值得注意的是第三个小例子，这是一种极端情况。obj1和obj2的初始化都发生了自动装箱操作。但是处于节省内存的考虑，JVM会缓存-128到127的Integer对象。因为obj1和obj2实际上是同一个对象。所以使用”==“比较返回true。</p><h3 id="容易混乱的对象和原始数据值"><a href="#容易混乱的对象和原始数据值" class="headerlink" title="容易混乱的对象和原始数据值"></a>容易混乱的对象和原始数据值</h3><p>另一个需要避免的问题就是混乱使用对象和原始数据值，一个具体的例子就是当我们在一个原始数据值与一个对象进行比较时，如果这个对象没有进行初始化或者为Null，在自动拆箱过程中obj.xxxValue，会抛出NullPointerException,如下面的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private static Integer count;</span><br><span class="line"></span><br><span class="line">//NullPointerException on unboxing</span><br><span class="line">if( count &lt;= 0)&#123;</span><br><span class="line">  System.out.println(&quot;Count is not started yet&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缓存的对象"><a href="#缓存的对象" class="headerlink" title="缓存的对象"></a>缓存的对象</h3><p>这个问题就是我们上面提到的极端情况，在Java中，会对-128到127的Integer对象进行缓存，当创建新的Integer对象时，如果符合这个这个范围，并且已有存在的相同值的对象，则返回这个对象，否则创建新的Integer对象。</p><h3 id="生成无用对象增加GC压力"><a href="#生成无用对象增加GC压力" class="headerlink" title="生成无用对象增加GC压力"></a>生成无用对象增加GC压力</h3><p>因为自动装箱会隐式地创建对象，像前面提到的那样，如果在一个循环体中，会创建无用的中间对象，这样会增加GC压力，拉低程序的性能。所以在写循环时一定要注意代码，避免引入不必要的自动装箱操作。</p><p>总的来说，自动装箱和拆箱着实为开发者带来了很大的方便，但是在使用时也是需要格外留意，避免引起出现文章提到的问题。</p><h3 id="原文信息："><a href="#原文信息：" class="headerlink" title="原文信息："></a>原文信息：</h3><p><a href="http://javarevisited.blogspot.com/2012/07/auto-boxing-and-unboxing-in-java-be.html" target="_blank" rel="noopener">What is Autoboxing and Unboxing in Java – Example Tutorial and Corner cases</a></p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>CentOS 安装 Mariadb</title>
      <link href="/2018/01/27/centos/centos-mysql-2018-01-27/"/>
      <url>/2018/01/27/centos/centos-mysql-2018-01-27/</url>
      <content type="html"><![CDATA[<h3 id="Step-One"><a href="#Step-One" class="headerlink" title="Step One"></a>Step One</h3><p>使用以下命令安装 Mariadb<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mariadb-server mariadb</span><br></pre></td></tr></table></figure></p><p>Mariadb的相关命令是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mariadb  #启动MariaDB</span><br><span class="line">systemctl stop mariadb  #停止MariaDB</span><br><span class="line">systemctl restart mariadb  #重启MariaDB</span><br><span class="line">systemctl enable mariadb  #设置开机启动</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="验证Mysql安装"><a href="#验证Mysql安装" class="headerlink" title="验证Mysql安装"></a>验证Mysql安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -version</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin  Ver 9.0 Distrib 5.5.56-MariaDB, for Linux on x86_64</span><br></pre></td></tr></table></figure></p><p>设置root密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root password &quot;new_password&quot;;</span><br></pre></td></tr></table></figure></p><p>登录Mariadb 输入mysql -u root -p 再输入new_password<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 15</span><br><span class="line">Server version: 5.5.56-MariaDB MariaDB Server</span><br></pre></td></tr></table></figure></p><h3 id="允许远程连接"><a href="#允许远程连接" class="headerlink" title="允许远程连接"></a>允许远程连接</h3><p>输入以下命令，新增root用户并允许用户root使用(yhacg.com)密码在任何主机上连接数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to root@&quot;%&quot; identified by &quot;yhacg.com&quot;;</span><br></pre></td></tr></table></figure></p><p>执行生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>CentOS 7 安装JDK</title>
      <link href="/2018/01/27/centos/centos-jdk-2018-1-26/"/>
      <url>/2018/01/27/centos/centos-jdk-2018-1-26/</url>
      <content type="html"><![CDATA[<p>CentOS7 系统 (我使用的是阿里云服务器CentOS7)</p><p>jdk-8u162-linux-x64.tar.gz <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">官网下载JDK</a> </p><p>Windows (<a href="https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&ch=&tn=baiduerr&bar=&wd=xshell" target="_blank" rel="noopener">xshell</a> ) or Mac(Yummy FTP pro) 使用以上任意一种工具将JDK上传至CentOS</p><p>将JDK压缩包解压至指定位置<br>tar -zxvf jdk-8u161-linux-x64.tar.gz -C /usr/local/java<br>解压完成，删除压缩包<br>rm  -f  jdk-8u161-linux-x64.tar.gz</p><p>vi /etc/profile<br><a id="more"></a></p><p>按i编辑<br>添加以下三行<br>export JAVA_HOME=/usr/local/java/jdk1.8.0_162<br>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br>export PATH=$PATH:$JAVA_HOME/bin</p><p>退出编辑模式 按esc</p><p>:wq 保存退出 :q 取消保存退出</p><p>保存完之后输入：source /etc/profile  命令使刚才配置的环境变量生效</p><p>现在就可以测试jdk了  输入 javac</p><p>通过 java -version命令来查看你安装的jdk信息</p>]]></content>
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>CentOS 上安装htop</title>
      <link href="/2018/01/27/centos/centos-yum-2018-1-26/"/>
      <url>/2018/01/27/centos/centos-yum-2018-1-26/</url>
      <content type="html"><![CDATA[<h3 id="Step-One"><a href="#Step-One" class="headerlink" title="Step One"></a>Step One</h3><p>首先我们需要安装一个叫”epel-release”的软件包，这个软件包会自动配置yum的软件仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br></pre></td></tr></table></figure><h3 id="Step-Two"><a href="#Step-Two" class="headerlink" title="Step Two"></a>Step Two</h3><p>现在我们可以使用yum install命令安装CentOS htop </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install htop</span><br></pre></td></tr></table></figure><p>隐藏子进程， 按F2出现下图，选中Hide userland process threads 回车，前面出现x，子进程就隐藏了。按esc 回去看即可。</p><p><img src="/images/htop-hide-child.png"></p>]]></content>
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>服务器重新安装系统，进行SSH连接发生错误处理方式</title>
      <link href="/2018/01/26/centos/centos-2018-1-26/"/>
      <url>/2018/01/26/centos/centos-2018-1-26/</url>
      <content type="html"><![CDATA[<h3 id="000-00-00-00-服务器端的ip地址"><a href="#000-00-00-00-服务器端的ip地址" class="headerlink" title="000.00.00.00 = 服务器端的ip地址"></a>000.00.00.00 = 服务器端的ip地址</h3><p>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<br>@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @<br>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<br>IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!<br>Someone could be eavesdropping on you right now (man-in-the-middle attack)!<br>It is also possible that a host key has just been changed.<br>The fingerprint for the ECDSA key sent by the remote host is<br>SHA256:keQgQ96khkDJLVJE/lfaS39A68cJ2DjDbK7XTY4ZoHI.<br>Please contact your system administrator.<br>Add correct host key in /Users/luck/.ssh/known_hosts to get rid of this message.<br>Offending ECDSA key in /Users/luck/.ssh/known_hosts:1<br>ECDSA host key for 000.00.00.00 has changed and you have requested strict checking.<br>Host key verification failed.</p><h3 id="出现这个问题的原因是-第一次使用SSH连接时，会生成一个认证，储存在客户端的known-hosts中"><a href="#出现这个问题的原因是-第一次使用SSH连接时，会生成一个认证，储存在客户端的known-hosts中" class="headerlink" title="出现这个问题的原因是,第一次使用SSH连接时，会生成一个认证，储存在客户端的known_hosts中."></a>出现这个问题的原因是,第一次使用SSH连接时，会生成一个认证，储存在客户端的known_hosts中.</h3><h3 id="解决办法：ssh-keygen-R-服务器端的ip地址"><a href="#解决办法：ssh-keygen-R-服务器端的ip地址" class="headerlink" title="解决办法：ssh-keygen -R 服务器端的ip地址"></a>解决办法：ssh-keygen -R 服务器端的ip地址</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tanyoupingdeMacBook-Pro:~ luck$ ssh-keygen -R 000.00.00.00</span><br><span class="line"># Host 000.00.00.00 found: line 1</span><br><span class="line">/Users/luck/.ssh/known_hosts updated.</span><br><span class="line">Original contents retained as /Users/luck/.ssh/known_hosts.old</span><br><span class="line">tanyoupingdeMacBook-Pro:~ luck$ ssh root@000.00.00.00</span><br><span class="line">The authenticity of host &apos;000.00.00.00 (000.00.00.00)&apos; can&apos;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:keQgQ96khkDJLVJE/lfaS39A68cJ2DjDbK7XTY4ZoHI.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added &apos;000.00.00.00&apos; (ECDSA) to the list of known hosts.</span><br><span class="line">root@000.00.00.00&apos;s password:</span><br><span class="line"></span><br><span class="line">Welcome to Alibaba Cloud Elastic Compute Service !</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>使用 Date 的after 和 before 时请注意</title>
      <link href="/2018/01/22/java/java-date-2018-01-22/"/>
      <url>/2018/01/22/java/java-date-2018-01-22/</url>
      <content type="html"><![CDATA[<p>Date1.after(Date2),当Date1大于Date2时，返回true，当小于等于时，返回false；</p><p>Date1.before(Date2)，当Date1小于Date2时，返回true，当大于等于时，返回false；</p><p>注意：如果业务数据存在相等的时候，而且相等时也需要做相应的业务判断或处理时</p><p>比如：2018-01-22日过期的，保存成2018-01-22 23:59:59</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Mybatis Log4j 控制台打印SQL</title>
      <link href="/2018/01/11/mybatis/mybatis-2018-01-11/"/>
      <url>/2018/01/11/mybatis/mybatis-2018-01-11/</url>
      <content type="html"><![CDATA[<h3 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=INFO, stdout</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Threshold=DEBUG</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH\:mm\:ss&#125; %p [%c]\:%L Line - %m%n</span><br><span class="line"></span><br><span class="line">#注意这里更换你自己的dao层</span><br><span class="line">log4j.logger.com.tanyouping.weixiao.dao=DEBUG </span><br><span class="line"></span><br><span class="line">log4j.logger.com.mybatis=DEBUG</span><br><span class="line">log4j.logger.com.mybatis.common.jdbc.SimpleDataSource=DEBUG</span><br><span class="line">log4j.logger.com.mybatis.common.jdbc.ScriptRunner=DEBUG</span><br><span class="line">log4j.logger.com.mybatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUG</span><br><span class="line">log4j.logger.java.sql.Connection=DEBUG</span><br><span class="line">log4j.logger.java.sql.Statement=DEBUG</span><br><span class="line">log4j.logger.java.sql.PreparedStatement=DEBUG</span><br><span class="line">log4j.logger.java.sql.ResultSet=DEBUG</span><br></pre></td></tr></table></figure><h3 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot; /&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="spring-mybatis-xml"><a href="#spring-mybatis-xml" class="headerlink" title="spring-mybatis.xml"></a>spring-mybatis.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">        &lt;!-- mybatis 配置文件--&gt;</span><br><span class="line">        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:config/mybatis-config.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!-- 扫描mapping.xml文件 --&gt;</span><br><span class="line">        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/tanyouping/weixiao/mapper/*.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;basePackage&quot; value=&quot;com.tanyouping.weixiao.dao&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>到此，本篇文章已经结束，下面分享其他资料和参考：</p><p>GitHub：<a href="https://github.com/222/weixiao" target="_blank" rel="noopener">weixiao</a></p>]]></content>
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Mybatis一对多查询时只查出了一条数据</title>
      <link href="/2018/01/08/mybatis/mybatis-2018-01-08/"/>
      <url>/2018/01/08/mybatis/mybatis-2018-01-08/</url>
      <content type="html"><![CDATA[<p>一般情况下，发生这种情况，多半因为（一方表）和（多方表）的id字段名相同造成的。<br>问题的关键在于resultMap中如果不定义类似主键之类的能够区分每一条结果集的字段的话，会引起后面一条数据覆盖前面一条数据的现象。</p><p>解决方法一：<br>修改（一方表）||（多方表）的id名，保证不一致就行</p><p>解决方法二：<br><a id="more"></a><br>查询结果起别名<br>修改映射文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id=&quot;User&quot; type=&quot;com.tanyouping.weixiao.domain.User&quot;&gt;</span><br><span class="line">        &lt;id column=&quot;id_&quot; property=&quot;id&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;created_&quot; property=&quot;created&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;name_&quot; property=&quot;name&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;createdMillisecond_&quot; property=&quot;createdMillisecond&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;mobile_&quot; property=&quot;mobile&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;email_&quot; property=&quot;email&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;sex_&quot; property=&quot;sex&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;birthday_&quot; property=&quot;birthday&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;salt_&quot; property=&quot;salt&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;pwd_&quot; property=&quot;pwd&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;status_&quot; property=&quot;status&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;illegal_&quot; property=&quot;illegal&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;remark_&quot; property=&quot;remark&quot;/&gt;</span><br><span class="line">        &lt;collection property=&quot;loginRecords&quot; ofType=&quot;com.tanyouping.weixiao.domain.LoginRecord&quot;&gt;</span><br><span class="line">            &lt;id column=&quot;recordId&quot; property=&quot;id&quot;/&gt;</span><br><span class="line">            &lt;result column=&quot;created_&quot; property=&quot;created&quot;/&gt;</span><br><span class="line">            &lt;result column=&quot;createdMillisecond_&quot; property=&quot;createdMillisecond&quot;/&gt;</span><br><span class="line">            &lt;result column=&quot;login_ip&quot; property=&quot;loginIP&quot;/&gt;</span><br><span class="line">            &lt;result column=&quot;user_id&quot; property=&quot;userId&quot;/&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;get&quot; parameterType=&quot;java.lang.String&quot; resultMap=&quot;User&quot;&gt;</span><br><span class="line">        SELECT</span><br><span class="line">          user.*,</span><br><span class="line">          loginRecord.id_ recordId,</span><br><span class="line">          loginRecord.created_,</span><br><span class="line">          loginRecord.createdMillisecond_,</span><br><span class="line">          loginRecord.login_ip,</span><br><span class="line">          loginRecord.user_id</span><br><span class="line">        FROM</span><br><span class="line">          t_user user,</span><br><span class="line">          t_login_record loginRecord</span><br><span class="line">        WHERE</span><br><span class="line">          user.id_ = loginRecord.user_id</span><br><span class="line">          AND</span><br><span class="line">          mobile_ = #&#123;value&#125; OR email_ = #&#123;value&#125; OR name_ = #&#123;value&#125;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mybatis配置mapperLocations 不能扫描java包 或不能扫描resources目录下的xml文件的处理</title>
      <link href="/2017/12/22/mybatis/mybatis-2017-12-22/"/>
      <url>/2017/12/22/mybatis/mybatis-2017-12-22/</url>
      <content type="html"><![CDATA[<p>关于mybatis配置mapperLocations 不能扫描java包 只能扫描resources目录下的xml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">    &lt;!-- 自动扫描mapping.xml文件 --&gt;</span><br><span class="line">    &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/tanyouping/weixiao/mapper/*.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>是因为xml文件在编译时，会被忽略掉。在target目录中，是找不着这个文件的。如果要让xml不被忽略掉。就需要进行一项配置。    </p><p>在pom.xml文件中添加<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;resources&gt;</span><br><span class="line">        &lt;resource&gt;</span><br><span class="line">            &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">            &lt;/includes&gt;</span><br><span class="line">            &lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class="line">        &lt;/resource&gt;</span><br><span class="line">    &lt;/resources&gt;</span><br><span class="line">    &lt;finalName&gt;weixiao&lt;/finalName&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><p>补充：同理resources不进行配置，也是会被忽略的，进行如下配置在进行编译就不会被忽略。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;resources&gt;</span><br><span class="line">        &lt;resource&gt;</span><br><span class="line">            &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">            &lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class="line">        &lt;/resource&gt;</span><br><span class="line">    &lt;/resources&gt;</span><br><span class="line">    &lt;finalName&gt;weixiao&lt;/finalName&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>springMVC swagger</title>
      <link href="/2017/12/18/swagger/swagger-2017-12-18/"/>
      <url>/2017/12/18/swagger/swagger-2017-12-18/</url>
      <content type="html"><![CDATA[<h3 id="nbsp-Maven"><a href="#nbsp-Maven" class="headerlink" title="&nbsp;Maven"></a>&nbsp;Maven</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.7.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.8.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><p>(<code>重点，敲黑板啊</code>：这个类要注入到spring中，不管你用xml 还是注解扫描,还需修改下边apis扫描的controller路径)<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.tanyouping.swagger;</span><br><span class="line"></span><br><span class="line">import ...</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Tan Youping on 2017/12/14.</span><br><span class="line"> */</span><br><span class="line">@EnableSwagger2</span><br><span class="line">public class SwaggerConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Docket buildDocket() &#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(buildApiInf())</span><br><span class="line">                .select()</span><br><span class="line">                //需要配置成你自己的包中controller路径</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(&quot;com.tanyouping.swagger.controller&quot;))//controller路径</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private ApiInfo buildApiInf() &#123;</span><br><span class="line">        return new ApiInfoBuilder()</span><br><span class="line">                .title(&quot;Swagger&quot;)</span><br><span class="line">                .termsOfServiceUrl(&quot;http://github.com/222&quot;)</span><br><span class="line">                .description(&quot;Spring MVC swagger2&quot;)</span><br><span class="line">                .contact(new Contact(&quot;Tan Youping&quot;, &quot;222.github.io&quot;, &quot;typinf@163.com&quot;))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.tanyouping.swagger.controller;</span><br><span class="line"></span><br><span class="line">import ...</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Tan Youping on 2017/12/14.</span><br><span class="line"> */</span><br><span class="line">@Controller</span><br><span class="line">//类上使用@Api</span><br><span class="line">@Api(value = &quot;SwaggerController&quot;, tags = &#123;&quot;Swagger操作接口&quot;&#125;)</span><br><span class="line">public class SwaggerController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;index&quot;, method = RequestMethod.GET)</span><br><span class="line">    //方法上使用@ApiOperation</span><br><span class="line">    @ApiOperation(value = &quot;首页&quot;, notes = &quot;跳转到首页&quot;)</span><br><span class="line">    //参数使用@ApiParam</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public Object index() &#123;</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(value = &quot;新增&quot;, notes = &quot;新增&quot;)</span><br><span class="line">    @RequestMapping(value = &quot;save&quot;, method = RequestMethod.POST)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public Object save(@RequestBody Swagger swagger) &#123;</span><br><span class="line">        return &quot;save&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(value = &quot;修改&quot;, notes = &quot;修改&quot;)</span><br><span class="line">    @RequestMapping(value = &quot;update&quot;, method = RequestMethod.PUT)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public Object update(@ApiParam(name = &quot;swagger实体&quot;, value = &quot;json格式&quot;, required = true) @RequestBody Swagger swagger) &#123;</span><br><span class="line">        return &quot;update&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(value = &quot;删除&quot;, notes = &quot;删除&quot;)</span><br><span class="line">    @RequestMapping(value = &quot;delete&quot;, method = RequestMethod.DELETE)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public Object delete(@ApiParam(name = &quot;id&quot;, value = &quot;用户id&quot;, required = true) @RequestBody String id) &#123;</span><br><span class="line">        return &quot;delete&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.tanyouping.swagger.entity;</span><br><span class="line"></span><br><span class="line">import ...</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Tan Youping on 2017/12/14.</span><br><span class="line"> * 参数注解</span><br><span class="line"> */</span><br><span class="line">@ApiModel(description=&quot;Swagger对象&quot;)</span><br><span class="line">public class Swagger implements Serializable&#123;</span><br><span class="line"></span><br><span class="line">    @ApiModelProperty(value=&quot;id&quot;,name=&quot;id&quot;)</span><br><span class="line">    private String id;</span><br><span class="line">    @ApiModelProperty(value=&quot;创建时间&quot;,name=&quot;created&quot;)</span><br><span class="line">    public Date created;</span><br><span class="line">    @ApiModelProperty(value=&quot;创建时间毫秒数&quot;,name=&quot;createdMillisecond&quot;)</span><br><span class="line">    public Long createdMillisecond;</span><br><span class="line">    @ApiModelProperty(value=&quot;名称&quot;,name=&quot;name&quot;)</span><br><span class="line">    private String name;</span><br><span class="line">    @ApiModelProperty(value=&quot;状态&quot;,name=&quot;status&quot;)</span><br><span class="line">    private Integer status;</span><br><span class="line">    @ApiModelProperty(value=&quot;备注&quot;,name=&quot;remark&quot;)</span><br><span class="line">    private String remark;</span><br><span class="line"></span><br><span class="line">    get set...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端访问"><a href="#前端访问" class="headerlink" title="前端访问"></a>前端访问</h3><p><strong>第一种</strong>：<br>1.在<a href="https://github.com/swagger-api/swagger-ui" target="_blank" rel="noopener">这里</a>下载ui,然后解压出来后，需要将dist里面的所有文件放到项目中，姑且放在WEB-INF/swagger 里吧</p><p>2.在swagger文件夹中找到index.html， 约在77行，将url: “<a href="http://petstore.swagger.io/v2/swagger.json&quot;" target="_blank" rel="noopener">http://petstore.swagger.io/v2/swagger.json&quot;</a>,<br>修改成你自己的项目的url: “<a href="http://localhost:8080/v2/api-docs&quot;,格式是IP/端口/项目(得看你配置的是什么，是项目名就加，是/就什么也不填)" target="_blank" rel="noopener">http://localhost:8080/v2/api-docs&quot;,格式是IP/端口/项目(得看你配置的是什么，是项目名就加，是/就什么也不填)</a> /v2/api-docs是固定的</p><p>3.别忘配置静态资源访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:resources mapping=&quot;/swagger/**&quot; location=&quot;/WEB-INF/swagger/&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>4.项目运行：<br>            访问：localhost:8080/swagger/index.html<br>5.完</p><p><strong>第二种</strong>：<br>1.加入ui jar，这里其实访问的是springfox-swagger-ui中的swagger-ui.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.7.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>2.静态资源访问配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:resources mapping=&quot;swagger-ui.html&quot; location=&quot;classpath:/META-INF/resources/&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>3.项目运行：<br>访问：localhost:8080/swagger-ui.html</p><p>到此，本篇文章已经结束，下面分享其他资料和参考：</p><p>参考地址：<br>官网：<a href="http://swagger.io/" target="_blank" rel="noopener">http://swagger.io/</a><br>docs：<a href="https://swagger.io/docs/specification/about/" target="_blank" rel="noopener">https://swagger.io/docs/specification/about/</a></p><p>本章demo<br>GitHub：<a href="https://github.com/tanyp/swagger" target="_blank" rel="noopener">swagger</a></p>]]></content>
      
      <categories>
          
          <category> swagger </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Mybatis</title>
      <link href="/2017/12/17/mybatis/mybatis-2017-12-17/"/>
      <url>/2017/12/17/mybatis/mybatis-2017-12-17/</url>
      <content type="html"><![CDATA[<p>demo github :<a href="https://github.com/tanyp/mybatis" target="_blank" rel="noopener">mybatis</a></p>]]></content>
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>CentOS 下mysql 忘记root密码的处理方法</title>
      <link href="/2017/12/06/centos/centos-mysql-2017-12-06/"/>
      <url>/2017/12/06/centos/centos-mysql-2017-12-06/</url>
      <content type="html"><![CDATA[<p>最近遇到个麻烦的事情，我自己阿里云的服务器数据库密码给忘记了，<br>然后就找了很多处理方法，故此记上一笔。希望以后不犯此类错误。嘿嘿嘿。。。</p><p>1.vi /etc/my.cnf</p><p>2.添加</p><p>skip-grant-tables<br>datadir=/var/lib/mysql<br>socket=/var/lib/mysql/mysql.sock<br>socket=/var/lib/mysql/mysql.sock</p><p>3.重启mysql</p><p>systemctl restart mysqld</p><p>4.用户无密码登录<br><a id="more"></a><br>mysql -u root -p (直接点击回车，密码为空)</p><p>5.选择数据库</p><p>use mysql;</p><p>6.修改root密码</p><p>update user set authentication_string=password(‘123456′) where user=’root’;</p><p>7.执行</p><p>flush privileges;</p><p>8.退出</p><p>exit;</p><p>9.删除</p><p>skip-grant-tables<br>datadir=/var/lib/mysql<br>socket=/var/lib/mysql/mysql.sock</p><p>10.重启mysql</p><p>systemctl restart mysqld</p><p>这样就ok了呢。</p>]]></content>
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
